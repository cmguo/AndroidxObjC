//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: androidx/annotation/annotation/src/main/java/androidx/annotation/RestrictTo.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidxAnnotationRestrictTo")
#ifdef RESTRICT_AndroidxAnnotationRestrictTo
#define INCLUDE_ALL_AndroidxAnnotationRestrictTo 0
#else
#define INCLUDE_ALL_AndroidxAnnotationRestrictTo 1
#endif
#undef RESTRICT_AndroidxAnnotationRestrictTo

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AXRestrictTo_) && (INCLUDE_ALL_AndroidxAnnotationRestrictTo || defined(INCLUDE_AXRestrictTo))
#define AXRestrictTo_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

@protocol AXRestrictTo < JavaLangAnnotationAnnotation >

@property (readonly) IOSObjectArray *value;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface AXRestrictTo : NSObject < AXRestrictTo > {
 @public
  IOSObjectArray *value_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(AXRestrictTo)

FOUNDATION_EXPORT id<AXRestrictTo> create_AXRestrictTo(IOSObjectArray *value);

J2OBJC_TYPE_LITERAL_HEADER(AXRestrictTo)

#define AndroidxAnnotationRestrictTo AXRestrictTo

#endif

#if !defined (AXRestrictTo_Scope_) && (INCLUDE_ALL_AndroidxAnnotationRestrictTo || defined(INCLUDE_AXRestrictTo_Scope))
#define AXRestrictTo_Scope_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, AXRestrictTo_Scope_Enum) {
  AXRestrictTo_Scope_Enum_LIBRARY = 0,
  AXRestrictTo_Scope_Enum_LIBRARY_GROUP = 1,
  AXRestrictTo_Scope_Enum_LIBRARY_GROUP_PREFIX = 2,
  AXRestrictTo_Scope_Enum_GROUP_ID = 3,
  AXRestrictTo_Scope_Enum_TESTS = 4,
  AXRestrictTo_Scope_Enum_SUBCLASSES = 5,
};

@interface AXRestrictTo_Scope : JavaLangEnum

@property (readonly, class, nonnull) AXRestrictTo_Scope *LIBRARY NS_SWIFT_NAME(LIBRARY);
@property (readonly, class, nonnull) AXRestrictTo_Scope *LIBRARY_GROUP NS_SWIFT_NAME(LIBRARY_GROUP);
@property (readonly, class, nonnull) AXRestrictTo_Scope *LIBRARY_GROUP_PREFIX NS_SWIFT_NAME(LIBRARY_GROUP_PREFIX);
@property (readonly, class, nonnull) AXRestrictTo_Scope *GROUP_ID NS_SWIFT_NAME(GROUP_ID);
@property (readonly, class, nonnull) AXRestrictTo_Scope *TESTS NS_SWIFT_NAME(TESTS);
@property (readonly, class, nonnull) AXRestrictTo_Scope *SUBCLASSES NS_SWIFT_NAME(SUBCLASSES);
#pragma mark Public

+ (AXRestrictTo_Scope *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (AXRestrictTo_Scope_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(AXRestrictTo_Scope)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT AXRestrictTo_Scope *AXRestrictTo_Scope_values_[];

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_LIBRARY(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, LIBRARY)

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_LIBRARY_GROUP(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, LIBRARY_GROUP)

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_LIBRARY_GROUP_PREFIX(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, LIBRARY_GROUP_PREFIX)

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_GROUP_ID(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, GROUP_ID)

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_TESTS(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, TESTS)

inline AXRestrictTo_Scope *AXRestrictTo_Scope_get_SUBCLASSES(void);
J2OBJC_ENUM_CONSTANT(AXRestrictTo_Scope, SUBCLASSES)

FOUNDATION_EXPORT IOSObjectArray *AXRestrictTo_Scope_values(void);

FOUNDATION_EXPORT AXRestrictTo_Scope *AXRestrictTo_Scope_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT AXRestrictTo_Scope *AXRestrictTo_Scope_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(AXRestrictTo_Scope)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidxAnnotationRestrictTo")
