//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: androidx/annotation/annotation/src/main/java/androidx/annotation/VisibleForTesting.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidxAnnotationVisibleForTesting")
#ifdef RESTRICT_AndroidxAnnotationVisibleForTesting
#define INCLUDE_ALL_AndroidxAnnotationVisibleForTesting 0
#else
#define INCLUDE_ALL_AndroidxAnnotationVisibleForTesting 1
#endif
#undef RESTRICT_AndroidxAnnotationVisibleForTesting

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AXVisibleForTesting_) && (INCLUDE_ALL_AndroidxAnnotationVisibleForTesting || defined(INCLUDE_AXVisibleForTesting))
#define AXVisibleForTesting_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;

@protocol AXVisibleForTesting < JavaLangAnnotationAnnotation >

@property (readonly) jint otherwise;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface AXVisibleForTesting : NSObject < AXVisibleForTesting > {
 @public
  jint otherwise_;
}
@property (readonly, class) jint PRIVATE NS_SWIFT_NAME(PRIVATE);
@property (readonly, class) jint PACKAGE_PRIVATE NS_SWIFT_NAME(PACKAGE_PRIVATE);
@property (readonly, class) jint PROTECTED NS_SWIFT_NAME(PROTECTED);
@property (readonly, class) jint NONE NS_SWIFT_NAME(NONE);

@end

J2OBJC_EMPTY_STATIC_INIT(AXVisibleForTesting)

inline jint AXVisibleForTesting_get_PRIVATE(void);
#define AXVisibleForTesting_PRIVATE 2
J2OBJC_STATIC_FIELD_CONSTANT(AXVisibleForTesting, PRIVATE, jint)

inline jint AXVisibleForTesting_get_PACKAGE_PRIVATE(void);
#define AXVisibleForTesting_PACKAGE_PRIVATE 3
J2OBJC_STATIC_FIELD_CONSTANT(AXVisibleForTesting, PACKAGE_PRIVATE, jint)

inline jint AXVisibleForTesting_get_PROTECTED(void);
#define AXVisibleForTesting_PROTECTED 4
J2OBJC_STATIC_FIELD_CONSTANT(AXVisibleForTesting, PROTECTED, jint)

inline jint AXVisibleForTesting_get_NONE(void);
#define AXVisibleForTesting_NONE 5
J2OBJC_STATIC_FIELD_CONSTANT(AXVisibleForTesting, NONE, jint)

FOUNDATION_EXPORT id<AXVisibleForTesting> create_AXVisibleForTesting(jint otherwise);

J2OBJC_TYPE_LITERAL_HEADER(AXVisibleForTesting)

#define AndroidxAnnotationVisibleForTesting AXVisibleForTesting

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidxAnnotationVisibleForTesting")
