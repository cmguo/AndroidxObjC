//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: androidx/arch/core/core-runtime/src/main/java/androidx/arch/core/executor/ArchTaskExecutor.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidxArchCoreExecutorArchTaskExecutor")
#ifdef RESTRICT_AndroidxArchCoreExecutorArchTaskExecutor
#define INCLUDE_ALL_AndroidxArchCoreExecutorArchTaskExecutor 0
#else
#define INCLUDE_ALL_AndroidxArchCoreExecutorArchTaskExecutor 1
#endif
#undef RESTRICT_AndroidxArchCoreExecutorArchTaskExecutor

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AXArchTaskExecutor_) && (INCLUDE_ALL_AndroidxArchCoreExecutorArchTaskExecutor || defined(INCLUDE_AXArchTaskExecutor))
#define AXArchTaskExecutor_

#define RESTRICT_AndroidxArchCoreExecutorTaskExecutor 1
#define INCLUDE_AXTaskExecutor 1
#include "androidx/arch/core/executor/TaskExecutor.h"

@protocol JavaLangRunnable;
@protocol JavaUtilConcurrentExecutor;

@interface AXArchTaskExecutor : AXTaskExecutor

#pragma mark Public

- (void)executeOnDiskIOWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

+ (AXArchTaskExecutor * __nonnull)getInstance;

+ (id<JavaUtilConcurrentExecutor> __nonnull)getIOThreadExecutor;

+ (id<JavaUtilConcurrentExecutor> __nonnull)getMainThreadExecutor;

- (jboolean)isMainThread;

- (void)postToMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)setDelegateWithAXTaskExecutor:(AXTaskExecutor * __nullable)taskExecutor;

@end

J2OBJC_STATIC_INIT(AXArchTaskExecutor)

FOUNDATION_EXPORT AXArchTaskExecutor *AXArchTaskExecutor_getInstance(void);

FOUNDATION_EXPORT id<JavaUtilConcurrentExecutor> AXArchTaskExecutor_getMainThreadExecutor(void);

FOUNDATION_EXPORT id<JavaUtilConcurrentExecutor> AXArchTaskExecutor_getIOThreadExecutor(void);

J2OBJC_TYPE_LITERAL_HEADER(AXArchTaskExecutor)

@compatibility_alias AndroidxArchCoreExecutorArchTaskExecutor AXArchTaskExecutor;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidxArchCoreExecutorArchTaskExecutor")
