//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: androidx/lifecycle/lifecycle-common/src/main/java/androidx/lifecycle/ClassesInfoCache.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidxLifecycleClassesInfoCache")
#ifdef RESTRICT_AndroidxLifecycleClassesInfoCache
#define INCLUDE_ALL_AndroidxLifecycleClassesInfoCache 0
#else
#define INCLUDE_ALL_AndroidxLifecycleClassesInfoCache 1
#endif
#undef RESTRICT_AndroidxLifecycleClassesInfoCache

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AXClassesInfoCache_) && (INCLUDE_ALL_AndroidxLifecycleClassesInfoCache || defined(INCLUDE_AXClassesInfoCache))
#define AXClassesInfoCache_

@class AXClassesInfoCache_CallbackInfo;
@class IOSClass;

@interface AXClassesInfoCache : NSObject
@property (class, strong) AXClassesInfoCache *sInstance NS_SWIFT_NAME(sInstance);

#pragma mark Package-Private

- (instancetype __nonnull)initPackagePrivate;

- (AXClassesInfoCache_CallbackInfo *)getInfoWithIOSClass:(IOSClass *)klass;

- (jboolean)hasLifecycleMethodsWithIOSClass:(IOSClass *)klass;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(AXClassesInfoCache)

inline AXClassesInfoCache *AXClassesInfoCache_get_sInstance(void);
inline AXClassesInfoCache *AXClassesInfoCache_set_sInstance(AXClassesInfoCache *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT AXClassesInfoCache *AXClassesInfoCache_sInstance;
J2OBJC_STATIC_FIELD_OBJ(AXClassesInfoCache, sInstance, AXClassesInfoCache *)

FOUNDATION_EXPORT void AXClassesInfoCache_initPackagePrivate(AXClassesInfoCache *self);

FOUNDATION_EXPORT AXClassesInfoCache *new_AXClassesInfoCache_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AXClassesInfoCache *create_AXClassesInfoCache_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(AXClassesInfoCache)

@compatibility_alias AndroidxLifecycleClassesInfoCache AXClassesInfoCache;

#endif

#if !defined (AXClassesInfoCache_CallbackInfo_) && (INCLUDE_ALL_AndroidxLifecycleClassesInfoCache || defined(INCLUDE_AXClassesInfoCache_CallbackInfo))
#define AXClassesInfoCache_CallbackInfo_

@class AXLifecycle_Event;
@protocol AXLifecycleOwner;
@protocol JavaUtilMap;

@interface AXClassesInfoCache_CallbackInfo : NSObject {
 @public
  id<JavaUtilMap> mEventToHandlers_;
  id<JavaUtilMap> mHandlerToEvent_;
}

#pragma mark Package-Private

- (instancetype __nonnull)initWithJavaUtilMap:(id<JavaUtilMap>)handlerToEvent;

- (void)invokeCallbacksWithAXLifecycleOwner:(id<AXLifecycleOwner>)source
                      withAXLifecycle_Event:(AXLifecycle_Event *)event
                                     withId:(id)target;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AXClassesInfoCache_CallbackInfo)

J2OBJC_FIELD_SETTER(AXClassesInfoCache_CallbackInfo, mEventToHandlers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(AXClassesInfoCache_CallbackInfo, mHandlerToEvent_, id<JavaUtilMap>)

FOUNDATION_EXPORT void AXClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(AXClassesInfoCache_CallbackInfo *self, id<JavaUtilMap> handlerToEvent);

FOUNDATION_EXPORT AXClassesInfoCache_CallbackInfo *new_AXClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(id<JavaUtilMap> handlerToEvent) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AXClassesInfoCache_CallbackInfo *create_AXClassesInfoCache_CallbackInfo_initWithJavaUtilMap_(id<JavaUtilMap> handlerToEvent);

J2OBJC_TYPE_LITERAL_HEADER(AXClassesInfoCache_CallbackInfo)

#endif

#if !defined (AXClassesInfoCache_MethodReference_) && (INCLUDE_ALL_AndroidxLifecycleClassesInfoCache || defined(INCLUDE_AXClassesInfoCache_MethodReference))
#define AXClassesInfoCache_MethodReference_

@class AXLifecycle_Event;
@class JavaLangReflectMethod;
@protocol AXLifecycleOwner;

@interface AXClassesInfoCache_MethodReference : NSObject {
 @public
  jint mCallType_;
  JavaLangReflectMethod *mMethod_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Package-Private

- (instancetype __nonnull)initWithInt:(jint)callType
            withJavaLangReflectMethod:(JavaLangReflectMethod *)method;

- (void)invokeCallbackWithAXLifecycleOwner:(id<AXLifecycleOwner>)source
                     withAXLifecycle_Event:(AXLifecycle_Event *)event
                                    withId:(id)target;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AXClassesInfoCache_MethodReference)

J2OBJC_FIELD_SETTER(AXClassesInfoCache_MethodReference, mMethod_, JavaLangReflectMethod *)

FOUNDATION_EXPORT void AXClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(AXClassesInfoCache_MethodReference *self, jint callType, JavaLangReflectMethod *method);

FOUNDATION_EXPORT AXClassesInfoCache_MethodReference *new_AXClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(jint callType, JavaLangReflectMethod *method) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AXClassesInfoCache_MethodReference *create_AXClassesInfoCache_MethodReference_initWithInt_withJavaLangReflectMethod_(jint callType, JavaLangReflectMethod *method);

J2OBJC_TYPE_LITERAL_HEADER(AXClassesInfoCache_MethodReference)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidxLifecycleClassesInfoCache")
