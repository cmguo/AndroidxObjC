//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: androidx/lifecycle/lifecycle-livedata-core/src/main/java/androidx/lifecycle/LiveData.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AndroidxLifecycleLiveData")
#ifdef RESTRICT_AndroidxLifecycleLiveData
#define INCLUDE_ALL_AndroidxLifecycleLiveData 0
#else
#define INCLUDE_ALL_AndroidxLifecycleLiveData 1
#endif
#undef RESTRICT_AndroidxLifecycleLiveData
#ifdef INCLUDE_AXLiveData_LifecycleBoundObserver
#define INCLUDE_AXLiveData_ObserverWrapper 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (AXLiveData_) && (INCLUDE_ALL_AndroidxLifecycleLiveData || defined(INCLUDE_AXLiveData))
#define AXLiveData_

@class AXLiveData_ObserverWrapper;
@protocol AXLifecycleOwner;
@protocol AXObserver;

@interface AXLiveData : NSObject {
 @public
  id mDataLock_;
  jint mActiveCount_;
  volatile_id mPendingData_;
}
@property (readonly, class) jint START_VERSION NS_SWIFT_NAME(START_VERSION);
@property (readonly, class, strong) id NOT_SET NS_SWIFT_NAME(NOT_SET);

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithId:(id)value;

- (id __nullable)getValue;

- (jboolean)hasActiveObservers;

- (jboolean)hasObservers;

- (void)observeWithAXLifecycleOwner:(id<AXLifecycleOwner> __nonnull)owner
                     withAXObserver:(id<AXObserver> __nonnull)observer;

- (void)observeForeverWithAXObserver:(id<AXObserver> __nonnull)observer;

- (void)removeObserverWithAXObserver:(id<AXObserver> __nonnull)observer;

- (void)removeObserversWithAXLifecycleOwner:(id<AXLifecycleOwner> __nonnull)owner;

#pragma mark Protected

- (void)onActive;

- (void)onInactive;

- (void)postValueWithId:(id)value;

- (void)setValueWithId:(id)value;

#pragma mark Package-Private

+ (void)assertMainThreadWithNSString:(NSString *)methodName;

- (void)changeActiveCounterWithInt:(jint)change;

- (void)dispatchingValueWithAXLiveData_ObserverWrapper:(AXLiveData_ObserverWrapper * __nullable)initiator;

- (jint)getVersion;

@end

J2OBJC_STATIC_INIT(AXLiveData)

J2OBJC_FIELD_SETTER(AXLiveData, mDataLock_, id)
J2OBJC_VOLATILE_FIELD_SETTER(AXLiveData, mPendingData_, id)

inline jint AXLiveData_get_START_VERSION(void);
#define AXLiveData_START_VERSION -1
J2OBJC_STATIC_FIELD_CONSTANT(AXLiveData, START_VERSION, jint)

inline id AXLiveData_get_NOT_SET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id AXLiveData_NOT_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(AXLiveData, NOT_SET, id)

FOUNDATION_EXPORT void AXLiveData_initWithId_(AXLiveData *self, id value);

FOUNDATION_EXPORT void AXLiveData_init(AXLiveData *self);

FOUNDATION_EXPORT void AXLiveData_assertMainThreadWithNSString_(NSString *methodName);

J2OBJC_TYPE_LITERAL_HEADER(AXLiveData)

@compatibility_alias AndroidxLifecycleLiveData AXLiveData;

#endif

#if !defined (AXLiveData_ObserverWrapper_) && (INCLUDE_ALL_AndroidxLifecycleLiveData || defined(INCLUDE_AXLiveData_ObserverWrapper))
#define AXLiveData_ObserverWrapper_

@class AXLiveData;
@protocol AXLifecycleOwner;
@protocol AXObserver;

@interface AXLiveData_ObserverWrapper : NSObject {
 @public
  id<AXObserver> mObserver_;
  jboolean mActive_;
  jint mLastVersion_;
}

#pragma mark Package-Private

- (void)activeStateChangedWithBoolean:(jboolean)newActive;

- (void)detachObserver;

- (jboolean)isAttachedToWithAXLifecycleOwner:(id<AXLifecycleOwner>)owner;

- (jboolean)shouldBeActive;

@end

J2OBJC_EMPTY_STATIC_INIT(AXLiveData_ObserverWrapper)

J2OBJC_FIELD_SETTER(AXLiveData_ObserverWrapper, mObserver_, id<AXObserver>)

FOUNDATION_EXPORT void AXLiveData_ObserverWrapper_initWithAXLiveData_withAXObserver_(AXLiveData_ObserverWrapper *self, AXLiveData *outer$, id<AXObserver> observer);

J2OBJC_TYPE_LITERAL_HEADER(AXLiveData_ObserverWrapper)

#endif

#if !defined (AXLiveData_LifecycleBoundObserver_) && (INCLUDE_ALL_AndroidxLifecycleLiveData || defined(INCLUDE_AXLiveData_LifecycleBoundObserver))
#define AXLiveData_LifecycleBoundObserver_

#define RESTRICT_AndroidxLifecycleLifecycleEventObserver 1
#define INCLUDE_AXLifecycleEventObserver 1
#include "androidx/lifecycle/LifecycleEventObserver.h"

@class AXLifecycle_Event;
@class AXLiveData;
@protocol AXLifecycleOwner;
@protocol AXObserver;

@interface AXLiveData_LifecycleBoundObserver : AXLiveData_ObserverWrapper < AXLifecycleEventObserver > {
 @public
  id<AXLifecycleOwner> mOwner_;
}

#pragma mark Public

- (void)onStateChangedWithAXLifecycleOwner:(id<AXLifecycleOwner> __nonnull)source
                     withAXLifecycle_Event:(AXLifecycle_Event * __nonnull)event;

#pragma mark Package-Private

- (instancetype __nonnull)initWithAXLiveData:(AXLiveData *)outer$
                        withAXLifecycleOwner:(id<AXLifecycleOwner> __nonnull)owner
                              withAXObserver:(id<AXObserver>)observer;

- (void)detachObserver;

- (jboolean)isAttachedToWithAXLifecycleOwner:(id<AXLifecycleOwner>)owner;

- (jboolean)shouldBeActive;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)initWithAXLiveData:(AXLiveData *)outer$
                              withAXObserver:(id<AXObserver>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(AXLiveData_LifecycleBoundObserver)

J2OBJC_FIELD_SETTER(AXLiveData_LifecycleBoundObserver, mOwner_, id<AXLifecycleOwner>)

FOUNDATION_EXPORT void AXLiveData_LifecycleBoundObserver_initWithAXLiveData_withAXLifecycleOwner_withAXObserver_(AXLiveData_LifecycleBoundObserver *self, AXLiveData *outer$, id<AXLifecycleOwner> owner, id<AXObserver> observer);

FOUNDATION_EXPORT AXLiveData_LifecycleBoundObserver *new_AXLiveData_LifecycleBoundObserver_initWithAXLiveData_withAXLifecycleOwner_withAXObserver_(AXLiveData *outer$, id<AXLifecycleOwner> owner, id<AXObserver> observer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT AXLiveData_LifecycleBoundObserver *create_AXLiveData_LifecycleBoundObserver_initWithAXLiveData_withAXLifecycleOwner_withAXObserver_(AXLiveData *outer$, id<AXLifecycleOwner> owner, id<AXObserver> observer);

J2OBJC_TYPE_LITERAL_HEADER(AXLiveData_LifecycleBoundObserver)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_AndroidxLifecycleLiveData")
